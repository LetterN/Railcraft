buildscript {
  repositories {
    maven {
      // Forge (this is the new url)
      url 'https://maven.minecraftforge.net'
    }
    mavenCentral()
    maven {
      // Mixin
      url 'https://repo.spongepowered.org/repository/maven-public'
    }
    maven {
      // Jar signing
      url 'https://plugins.gradle.org/m2/'
    }
  }
  dependencies {
    classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    classpath 'net.covers1624:JarSignPlugin:1.1.4' // signing.
  }
}

apply plugin: 'net.minecraftforge.gradle'

apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'net.covers1624.signing'

// apply from: 'https://raw.githubusercontent.com/SizableShrimp/Forge-Class-Remapper/main/classremapper.gradle'

def isCI = System.getenv("GITHUB_ACTION")
def nightly = System.getenv("GITHUB_NIGHTLY")
def ref = System.getenv("GITHUB_PR_NUMBER")

def tag = nightly ? "NIGHTLY" : "CI"
def suffix = "-${tag}" + (ref ? "-${ref}" : "")

def signProps = [:]
if (System.getenv("SECURE_SIGN")) {
    println("Using Env variables for jar signing.")
    signProps['keyStore'] = System.getenv("KEY_STORE")
    signProps['storePass'] = System.getenv('KEY_STORE_PASS')
    signProps['keyPass'] = System.getenv('KEY_STORE_KEY_PASS')
} else if (project.hasProperty('keyStore')) {
    println("Using Project properties for jar signing.")
    signProps['keyStore'] = project.getProperty('keyStore')
    signProps['storePass'] = project.getProperty('keyStorePass')
    signProps['keyPass'] = project.getProperty('keyStoreKeyPass')
}

// does in fact follow the semantic versioning. (GAMEVER)-(MAJOR.MINOR.PATCH)[-[NIGHTLY | CI]][-RUNID.RUNINT]-HASH
version = "${minecraft_version}-${mod_version}"
if(isCI) {
    version = version + suffix
}
if(isCI || nightly) {
    version = version + "-" + 'git rev-parse --short HEAD'.execute().text.trim()
}

group = 'mods.railcraft'
archivesBaseName = 'railcraft'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

println('')
println('*************************************************************')
println('Project Version: ' + version)
if (isCI) {
  println("Running in Github Workflow ${tag}" + (ref ? " pull request ${ref}." : "."))
}
if (!signProps.isEmpty()) {
  println("With .jar signing.")
}
println('Java: ' + System.getProperty('java.version'))
println('JVM: ' + System.getProperty('java.vm.version'))
println('*************************************************************')
println('')

sourceSets {
    api {
    	// API has no resources
        resources.srcDirs = []
    }
    main {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
        resources {
            srcDir 'src/generated/resources'
        }
    }
}

configurations {
	apiImplementation.extendsFrom(implementation)
	apiRuntimeOnly.extendsFrom(runtimeOnly)
}

minecraft {
    mappings channel: 'official', version: "${project.minecraft_version}"

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run/client')

            property 'forge.logging.console.level', 'debug'

            args '--mixin', 'railcraft.mixins.json'

            mods {
                railcraft {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }

        server {
            workingDirectory project.file('run/server')

            property 'forge.logging.console.level', 'debug'

            args '--mixin', 'railcraft.mixins.json'

            mods {
                railcraft {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }

        data {
            workingDirectory project.file('run/data')

            property 'forge.logging.console.level', 'debug'

            args '--mod', 'railcraft', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                railcraft {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }
    }
}

repositories {
    maven {
        name 'sponge'
        url 'https://repo.spongepowered.org/repository/maven-public'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"
    // minecraft group: 'net.minecraftforge', name: 'forge', version: "${project.minecraft_version}-${project.forge_version}"
    implementation group: 'org.spongepowered', name: 'mixin', version: "${project.mixin_version}"
    annotationProcessor("org.spongepowered:mixin:${project.mixin_version}:processor")
    testAnnotationProcessor("org.spongepowered:mixin:${project.mixin_version}:processor")
}

def fullHash = 'git rev-parse HEAD'.execute().text.trim();

jar {
    from sourceSets.main.output
    from sourceSets.api.output

    manifest {
        attributes([
            "Implementation-Title": project.name,
            "Implementation-Version": project.version,
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "Build-Commit": fullHash ? fullHash : "NOHASH", // this exists if you used git clone else its false (nonull)
            "Build-GitSource": isCI ? tag : "LOCAL",
            "MixinConfigs": 'railcraft.mixins.json'
        ])
    }

    finalizedBy('reobfJar')
}

mixin {
    add sourceSets.main, 'railcraft.refmap.json'
}

signing {
    if (!signProps.isEmpty()) {
        jars {
            sign jar
            after 'reobfJar'

            keyStore = signProps.keyStore
            storePass = signProps.storePass

            alias = "railcraft"
            keyPass = signProps.keyPass
        }
    }
}
